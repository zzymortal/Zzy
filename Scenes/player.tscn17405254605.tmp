[gd_scene load_steps=11 format=3 uid="uid://f4sqhcp6c1jc"]

[ext_resource type="Texture2D" uid="uid://bo13nehj0co3g" path="res://kenney_pico-8-platformer/Transparent/Tilemap/tilemap_packed.png" id="1_v0iea"]

[sub_resource type="GDScript" id="GDScript_v0iea"]
script/source = "extends CharacterBody2D

enum State { IDLE, WALK, RUN, DIE }

@export var max_speed: float = 100
@export var acceleration: float = 200
@export var direction := -1  # 初始朝左
var gravity := ProjectSettings.get(\"physics/2d/default_gravity\") as float
var current_state: State = State.WALK  # 开局默认巡逻

@onready var floor_check: RayCast2D = $Node2D/FloorCheck
@onready var wall_check: RayCast2D = $Node2D/WallCheck  # 仅使用 wall_check
@onready var player_check: RayCast2D = $Node2D/PlayerCheck
@onready var animated_sprite_2d: AnimatedSprite2D = $Node2D/AnimatedSprite2D
@onready var collision_shape: CollisionShape2D = $CollisionShape2D

# 监听玩家与敌人的碰撞
@onready var enemy_area: Area2D = $EnemyArea  # 假设你已经设置了一个 Area2D 来检测与敌人碰撞

func _ready() -> void:
	# 连接碰撞信号
	enemy_area.connect(\"area_entered\", Callable(self, \"_on_enemy_collision\"))

func _physics_process(delta: float) -> void:
	update_state()  # 更新状态
	handle_movement(delta)  # 移动逻辑
	handle_animation()  # 动画切换

# 更新状态和RayCast的方向
func update_state() -> void:
	# 更新 RayCast2D 检测方向（确保检测角色正前方）
	wall_check.target_position.x = 10 * direction  # 根据角色方向调整墙壁检测
	floor_check.target_position = Vector2(10 * direction, 20)  # 确保检测角色正前方的地面
	player_check.target_position.x = 10 * direction  # 根据角色方向调整玩家检测

	# 如果检测到玩家，切换为跑动状态
	if player_check.is_colliding():
		current_state = State.RUN
		return

	# 如果撞墙或没地面，则调头并恢复速度
	if wall_check.is_colliding() or not floor_check.is_colliding():
		direction *= -1  # 反转方向
		velocity.x = max_speed * 0.5 * direction  # 立即重设速度，防止掉速
		current_state = State.WALK  # 撞墙后回到行走状态
		return

	# 默认保持 WALK 状态（除非进入 RUN）
	if current_state != State.RUN:
		current_state = State.WALK

# 根据状态处理移动逻辑
func handle_movement(delta: float) -> void:
	match current_state:
		State.IDLE:
			velocity.x = move_toward(velocity.x, 0, acceleration * delta)

		State.WALK:
			var walk_speed = max_speed * 0.5
			velocity.x = move_toward(velocity.x, walk_speed * direction, acceleration * delta)

		State.RUN:
			velocity.x = move_toward(velocity.x, max_speed * direction, acceleration * delta)

	velocity.y += gravity * delta

	# 使用 move_and_slide() 来处理碰撞
	move_and_slide()

# 根据当前状态播放动画
func handle_animation() -> void:
	match current_state:
		State.IDLE:
			animated_sprite_2d.play(\"idle\")
		State.WALK:
			animated_sprite_2d.play(\"walk\")
		State.RUN:
			animated_sprite_2d.play(\"run\")
		State.DIE:
			animated_sprite_2d.play(\"die\")

	# 翻转角色朝向
	if not is_zero_approx(velocity.x):
		animated_sprite_2d.flip_h = direction < 0

# 当玩家与敌人碰撞时触发的函数
func _on_enemy_collision(area: Area2D) -> void:
	# 确保碰到的是敌人
	if area.is_in_group(\"enemies\"):  # 假设敌人都在 \"enemies\" 组中
		current_state = State.DIE  # 切换到死亡状态
		# 播放死亡动画
		animated_sprite_2d.play(\"die\")
		# 关闭玩家的碰撞体，防止再与敌人碰撞
		collision_shape.disabled = true
		# 等待 1 秒钟后移除玩家
		await get_tree().create_timer(1.0).timeout  # 等待定时器超时
		queue_free()  # 删除玩家节点
"

[sub_resource type="AtlasTexture" id="AtlasTexture_v0iea"]
atlas = ExtResource("1_v0iea")
region = Rect2(32, 48, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_fkybt"]
atlas = ExtResource("1_v0iea")
region = Rect2(40, 48, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_x3wgy"]
atlas = ExtResource("1_v0iea")
region = Rect2(48, 48, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_cvnsp"]
atlas = ExtResource("1_v0iea")
region = Rect2(0, 48, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_6t5aa"]
atlas = ExtResource("1_v0iea")
region = Rect2(16, 48, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_vgqql"]
atlas = ExtResource("1_v0iea")
region = Rect2(8, 48, 8, 8)

[sub_resource type="SpriteFrames" id="SpriteFrames_fkybt"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_v0iea")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fkybt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_x3wgy")
}],
"loop": true,
"name": &"die",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_cvnsp")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6t5aa")
}],
"loop": true,
"name": &"jump",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vgqql")
}],
"loop": true,
"name": &"walk",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_x3wgy"]
size = Vector2(0.0254777, 0.0245776)

[node name="Player" type="CharacterBody2D"]
collision_layer = 2
collision_mask = 5
script = SubResource("GDScript_v0iea")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(135.5, 52.25)
scale = Vector2(1.625, 1.5625)
sprite_frames = SubResource("SpriteFrames_fkybt")
animation = &"die"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(135.5, 53)
scale = Vector2(431.75, 406.875)
shape = SubResource("RectangleShape2D_x3wgy")
